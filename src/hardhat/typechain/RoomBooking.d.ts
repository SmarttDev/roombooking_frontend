/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RoomBookingInterface extends ethers.utils.Interface {
  functions: {
    "MAX_ROOM()": FunctionFragment;
    "MAX_SLOT()": FunctionFragment;
    "addWhitelist(string,address)": FunctionFragment;
    "cancelRoomSpace(string,uint8,uint8)": FunctionFragment;
    "getCompanies()": FunctionFragment;
    "reserveRoomSpace(string,uint8,uint8)": FunctionFragment;
    "roomlist(string,uint8,uint256)": FunctionFragment;
    "whitelist(string,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX_ROOM", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_SLOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRoomSpace",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRoomSpace",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roomlist",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_ROOM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_SLOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRoomSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRoomSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roomlist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "Canceled(address,string,uint8,uint8)": EventFragment;
    "Reserved(address,string,uint8,uint8)": EventFragment;
    "Whitelisted(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Canceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reserved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelisted"): EventFragment;
}

export type CanceledEvent = TypedEvent<
  [string, string, number, number] & {
    _occupant: string;
    _company: string;
    _slot: number;
    _roomSpace: number;
  }
>;

export type ReservedEvent = TypedEvent<
  [string, string, number, number] & {
    _occupant: string;
    _company: string;
    _slot: number;
    _roomSpace: number;
  }
>;

export type WhitelistedEvent = TypedEvent<
  [string, string] & { _company: string; _address: string }
>;

export class RoomBooking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RoomBookingInterface;

  functions: {
    MAX_ROOM(overrides?: CallOverrides): Promise<[number]>;

    MAX_SLOT(overrides?: CallOverrides): Promise<[number]>;

    addWhitelist(
      _company: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRoomSpace(
      _company: string,
      _slot: BigNumberish,
      _roomSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCompanies(overrides?: CallOverrides): Promise<[string[]]>;

    reserveRoomSpace(
      _company: string,
      _slot: BigNumberish,
      _roomSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roomlist(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { booked: boolean; owner: string }>;

    whitelist(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MAX_ROOM(overrides?: CallOverrides): Promise<number>;

  MAX_SLOT(overrides?: CallOverrides): Promise<number>;

  addWhitelist(
    _company: string,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRoomSpace(
    _company: string,
    _slot: BigNumberish,
    _roomSpace: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCompanies(overrides?: CallOverrides): Promise<string[]>;

  reserveRoomSpace(
    _company: string,
    _slot: BigNumberish,
    _roomSpace: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roomlist(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { booked: boolean; owner: string }>;

  whitelist(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    MAX_ROOM(overrides?: CallOverrides): Promise<number>;

    MAX_SLOT(overrides?: CallOverrides): Promise<number>;

    addWhitelist(
      _company: string,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRoomSpace(
      _company: string,
      _slot: BigNumberish,
      _roomSpace: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCompanies(overrides?: CallOverrides): Promise<string[]>;

    reserveRoomSpace(
      _company: string,
      _slot: BigNumberish,
      _roomSpace: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    roomlist(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { booked: boolean; owner: string }>;

    whitelist(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Canceled(address,string,uint8,uint8)"(
      _occupant?: null,
      _company?: null,
      _slot?: null,
      _roomSpace?: null
    ): TypedEventFilter<
      [string, string, number, number],
      { _occupant: string; _company: string; _slot: number; _roomSpace: number }
    >;

    Canceled(
      _occupant?: null,
      _company?: null,
      _slot?: null,
      _roomSpace?: null
    ): TypedEventFilter<
      [string, string, number, number],
      { _occupant: string; _company: string; _slot: number; _roomSpace: number }
    >;

    "Reserved(address,string,uint8,uint8)"(
      _occupant?: null,
      _company?: null,
      _slot?: null,
      _roomSpace?: null
    ): TypedEventFilter<
      [string, string, number, number],
      { _occupant: string; _company: string; _slot: number; _roomSpace: number }
    >;

    Reserved(
      _occupant?: null,
      _company?: null,
      _slot?: null,
      _roomSpace?: null
    ): TypedEventFilter<
      [string, string, number, number],
      { _occupant: string; _company: string; _slot: number; _roomSpace: number }
    >;

    "Whitelisted(string,address)"(
      _company?: null,
      _address?: null
    ): TypedEventFilter<
      [string, string],
      { _company: string; _address: string }
    >;

    Whitelisted(
      _company?: null,
      _address?: null
    ): TypedEventFilter<
      [string, string],
      { _company: string; _address: string }
    >;
  };

  estimateGas: {
    MAX_ROOM(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelist(
      _company: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRoomSpace(
      _company: string,
      _slot: BigNumberish,
      _roomSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCompanies(overrides?: CallOverrides): Promise<BigNumber>;

    reserveRoomSpace(
      _company: string,
      _slot: BigNumberish,
      _roomSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roomlist(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ROOM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addWhitelist(
      _company: string,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRoomSpace(
      _company: string,
      _slot: BigNumberish,
      _roomSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCompanies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveRoomSpace(
      _company: string,
      _slot: BigNumberish,
      _roomSpace: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roomlist(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
